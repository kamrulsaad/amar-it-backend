generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username  String    @id @unique
  password  String
  role      USER_ROLE
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  customer  Customer?
  admin     Admin?

  @@map("users")
}

model Customer {
  id           String     @id @default(uuid())
  firstName    String?
  middleName   String?
  lastName     String?
  email        String?
  contactNo    String?
  address      String?
  profileImage String?
  username     String     @unique
  user         User       @relation(fields: [username], references: [username])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  feedbacks    Feedback[]
  Ticket       Ticket[]
  Payments     Payments[]

  @@map("customers")
}

model Admin {
  id           String     @id @default(uuid())
  firstName    String
  middleName   String?
  lastName     String
  email        String
  contactNo    String
  address      String
  profileImage String?
  username     String     @unique
  user         User       @relation(fields: [username], references: [username])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("admins")
}

model Permission {
  id    String @id @default(uuid())
  title String

  admins Admin[]

  @@map("permissions")
}

model Service {
  id          String        @id @default(uuid())
  title       String
  description String
  features    String[]
  charge      Float
  status      ServiceStatus @default(active)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  bookings    Booking[]
  Feedback    Feedback[]

  @@map("services")
}

model Booking {
  id         String   @id @default(uuid())
  startTime  String
  endTime    String
  date       DateTime
  status     Status   @default(pending)
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("bookings")
}

model Feedback {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("feedbacks")
}

model Ticket {
  id         String       @id @default(uuid())
  customerId String
  customer   Customer     @relation(fields: [customerId], references: [id])
  message    String
  reply      String?
  status     TicketStatus @default(pending)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("tickets")
}

model BlogCategory {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]

  @@map("blog_categories")
}

model Blog {
  id             String       @id @default(uuid())
  title          String
  content        String
  image          String
  blogCategoryId String
  blogCategory   BlogCategory @relation(fields: [blogCategoryId], references: [id], onDelete: Cascade)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("blogs")
}

model HomeBannerContents {
  id        String   @id @default(uuid())
  title     String
  content   String
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("home_banner_contents")
}

model FAQ {
  id        String   @id @default(uuid())
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Payments {
  id         String   @id @default(uuid())
  customerId String
  paymentID  String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  isPaid     Boolean
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("payments")
}

enum USER_ROLE {
  super_admin
  admin
  customer
}

enum Status {
  pending
  completed
  cancelled
}

enum TicketStatus {
  pending
  resolved
  closed
}

enum ServiceStatus {
  active
  upcoming
}
